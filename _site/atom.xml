<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Ben Cohen</title>
 <link href="http://bencohen.net/atom.xml" rel="self"/>
 <link href="http://bencohen.net/"/>
 <updated>2010-03-14 22:12:37 -0700</updated>
 <id>http://bencohen.net/</id>
 <author>
   <name>Ben Cohen</name>
   <email>ben@bencohen.net</email>
 </author>
 
 <entry>
   <title>Policy, Technology, and Law: Who Decides?</title>
   <link href="http://bencohen.net/2010/02/07/policy-technology-and-law-who-decides/"/>
   <updated>2010-02-07 00:00:00 -0800</updated>
   <id>http://bencohen.net/2010/02/07/policy-technology-and-law-who-decides</id>
   <content type="html"><h1 id='policy_technology_and_law_who_decides'>Policy, Technology, and Law: Who Decides?</h1>

<p>In his paper on the proposed censorship scheme for internet access in Australia, Bambauer suggests evaluating the proposal with regard to four criteria: openness, transparency, narrowness and accountability. He evaluates the Australian proposal along these criteria, and discusses areas in which the proposal is strong, as well as areas which are potentially weak, such as accountability. While these are excellent criteria with which to evaluate the censorship proposal, they beg a larger question. That is, when political bodies address social issues using new technology, which groups need technical, political and legal competency?</p>

<p>Earlier this semester, we looked at two relevant selections on different models of policy codification. In one model, policy makers do their best to give technologists a set of tools for revealing policy issues that might be raised by new technological developments. In another, there is an effort to separate policy and technology and have each group work with the other to build a single system. These models are both acknowledging the challenges of codifying existing social and legal norms into systems that act blindly.</p>

<p>Turning from Australia for a moment to the United States, it is worth considering another example of communication censorship for contrast. The U.S. Postal service has a long history of acting as a gatekeeper against the transmission of obscene material. Its postal inspectors enforce “more than 200 federal laws”<span class='aside'>https://postalinspectors.uspis.gov/investigations/MailFraud/fraudschemes/ce/CE.aspx</span>, many pertaining to to “child exploitation”. Under Bambauer’s analysis, the U.S. Postal service is probably not as good about censorship as the Australian proposal. However, it does have two advantages. First, rule making and enforcement are done by the same class of entity (human), and second, when the system fails, there is an established protocol for appealing the failure (the court system). Bambauer’s analysis is still very useful, and the postal service would be improved if it were more open, transparent, narrowly restrictive, and accountable, but the importance of its two advantages is significant.</p>

<p>A large, unaddressed issue, the condition alluded to earlier which is presupposed by Bambauer’s list, is that translating a functioning system that deals with a single class of entities into a function system that involves multiple classes is tremendously difficult and requires great breadth and depth of expertise. What is not clear is with whom that expertise should lie.</p>

<p>The Australian government drafted legislation in response to public demand (democratically expressed) that would ban some and restrict other content on the internet for all Australian citizens. In addition to the new legislation, Australia has two content censoring bodies, the ACMA and Classification Board, which “implement the statutory classification framework.”2 Also involved in the new censorship scheme are ISPs, filtering software makers, foreign watchdog groups, and Australia’s own citizens. Who should decide which protocols are filtered? Who should decide whether filter performance is important, and what level of performance is acceptable? Who should decide what constitutes an overly- broad filter? None of these questions has an obvious answer, and this list is far from exhaustive. More broadly, should legislators consider what is technically feasible when codifying (in law) policy?</p>

<p>This is not a novel question. It has been raised before, and dismissed with the argument that legislators often have to make law in technical areas in which they are not experts. They rely on expert consultation, lobbying groups, and the industries under regulation themselves. These is a valid point, and it’s certainly relevant to this case as well. Recall the modes of interaction between policy makers and technologists we encountered in our readings earlier this semester and it’s clear that there can be meaningful collaborations between the two groups. However, there is an important difference. At the end of the legislative process, in most cases there are a set of laws that will be interpreted by people, enacted by people, and reviewed by people along the way. Lawyers will either help groups comply or challenge the laws when appropriate. In the case of technology and software, the final product of legislation will be law, process, and code. It’s this last component, which requires not just expertise in a different field, but a different understanding of how the product will be used.</p>

<p>In some introductory programming books, the author tries to expose the novitiate to the concept of programming, and how it is different from human interaction, by having the reader think about telling a computer to make a sandwich. This “simple” task is very difficult to explain to a computer, and the novice understands that computers are good at some things, and bad at following poorly expressed directions. Code written as law is bad code. Consequently, somebody else, ACMA or the ISPs or the filter providers or the watchdog groups, has to translate legislative intent into executable code. While Bambauer addresses this in passing as an accountability issue, it is more fundamental than that. The questions that get passed off to third parties are important, policy-laden questions. If you block http, but not https, you have a simple work around. If you have DPI, you take a bigger performance hit or have a system that costs more. If you filter smtp, you might be over- broad.</p>

<p>Governments, and their people, think that technological issues can be addressed with the same system which has been used to address policy issues since time immemorial. This thinking leads to the addition of RFID to passports being considered a “mere policy change” and internet filtering done like mail filtering from a hundred years earlier. Multi- class systems, involving people and computers, require different kinds of thinking. Until that issue is addressed, we’re left with useful, but ultimately insufficient, criteria, such as those provided by Bambauer.</p></content>
   <author>
     <name>Ben Cohen</name>
     <uri>http://bencohen.net/</uri>
   </author>
 </entry>
 
 <entry>
   <title>My Get-Back-To-Work Hack</title>
   <link href="http://bencohen.net/2009/09/14/my-get-back-to-work-hack/"/>
   <updated>2009-09-14 00:00:00 -0700</updated>
   <id>http://bencohen.net/2009/09/14/my-get-back-to-work-hack</id>
   <content type="html"><h1>My Get-Back-To-Work Hack</h1>
<p>I&#8217;ve been looking for a way to fight distractions on the web. I&#8217;ve tried <a href="http://visitsteve.com/work/selfcontrol/">SelfControl</a>, but just getting a &#8220;server not found&#8221; error in the browser when I visit a temptingly unproductive site isn&#8217;t particularly motivational.</p>
<p>The hack for this I came up with today is cheap and dumb, but it works. If you want to be sure it&#8217;s worth your time, watch this 46 second long <a href="http://screenr.com/Ix7">screencast</a>, then read on if you like what you see.</p>
<p>If you&#8217;re an experienced web developer, this will probably take you all of ten minutes to set up. If not, I&#8217;ve tried to explain it in pretty friendly terminology, but you might want to grab the nearest techie to help you out.</p>
<h2>Step One: Block Distracting Domains</h2>
<p>The <code>/etc/hosts</code> file tells your computer where other computers are. Normally, this file is almost empty; it just points your computer at itself, reminding it that its local address is <code>127.0.0.1</code>. Your computer doesn&#8217;t need to know much more than that because it uses <a href="http://en.wikipedia.org/wiki/Domain_Name_System"><span class="caps">DNS</span></a> and similar protocols to find other computers over the network. Still, every time your computer tries to talk to another computer, it checks <code>/etc/hosts</code> to see if we&#8217;ve specified the other computer&#8217;s address.</p>
<p>We can make use of the <code>/etc/hosts</code> file to block specific domains that we shouldn&#8217;t be spending time on. We just associate those domains with a bad address &#8211; in this case, the address of our local machine.</p>
<p>My <code>/etc/hosts</code> looks like <a href="http://gist.github.com/187138">this</a>. It&#8217;s the lines below the commented-out line about &#8220;distractions&#8221; that matter. Those lines say that the specified domains are served by my own computer. They aren&#8217;t, of course, so when I visit those sites, my browser gives me an error page.</p>
<p>Go ahead and put your own time-wasting sites in there; be sure to add the &#8220;www.&#8221; variant, if the site has one. If you like, you can collapse all the domains onto one line after the &#8220;127.0.0.1&#8221;, but I find it easier to read over multiple lines.</p>
<p>To an extent, this solves the problem: if you visit one of the domains you added to the file, you don&#8217;t get there. But as with SelfControl&#8217;s solution, an error page in your browser isn&#8217;t very motivational. Let&#8217;s go further.</p>
<h2>Step Two: Serving Content for Blocked Domains</h2>
<p>Since we&#8217;re directing requests for distracting domains to our own system, why not do something with those requests? Fire up a web server on the usual port (80). On a Mac, this is as simple as going to Sharing in System Preferences and ticking the box for Web Sharing. The text there may say that your computer&#8217;s website is available at some fancy address, but it&#8217;s also available on <a href="http://127.0.0.1/">http://127.0.0.1/</a>.</p>
<p>Now, visit one of those sites you put in your <code>/etc/hosts</code>. You get a real webpage this time, right? Most likely, it&#8217;s whatever default page came with your web server software; it might say &#8220;It worked!&#8221; or something equally inane. The name of this file is probably <code>index.html.en</code> (or maybe without the &#8220;.en&#8221; part). On a Mac, it lives at <code>/Library/WebServer/Documents/index.html.en</code>. You should modify that file. Make it pretty, but not too pretty. Put a message in there that&#8217;s motivational to you. Visit one of your blocked sites, and you should see your custom message instead. Pretty good.</p>
<p>There&#8217;s a problem, though. Say you blocked dumbsite.com. If you visit <code>http://dumbsite.com/foo/bar/baz.html</code>, you&#8217;ll get a <code>404 File Not Found</code> error from your local web server. That&#8217;s because you don&#8217;t have the files and directories the server is looking for inside the default folder your web server stores web pages in. You don&#8217;t want to have to provide these, either; you just want to serve the same page for every domain you&#8217;ve blocked.</p>
<p>If you&#8217;re using Apache, you can use a couple of lines like <a href="http://gist.github.com/187146">this</a> inside your <code>httpd.conf</code> to rewrite any <span class="caps">URL</span> to point to a file in your document root (in this case, <code>index.php</code>, but change that to whatever you want). That will get you back to seeing your custom page when you visit a blocked domain, regardless of the <span class="caps">URL</span>.</p>
<p>If you want to keep it simple, get all that working and stop here. You&#8217;ve got a nice custom reminder to get back to work, and few moving parts to maintain. If you&#8217;re comfortable setting up <span class="caps">PHP</span>, though, venture on for a little gravy.</p>
<h2>Step Three: Doing Something Useful with Blocked Domains</h2>
<p>I didn&#8217;t just want a motivational message. I wanted a reminder of exactly what I should be doing.</p>
<p>Once I got the above working, I flipped on <span class="caps">PHP</span> in my <code>httpd.conf</code> and set Apache to run as my user. Then, I changed my <code>index.php</code> to <a href="http://gist.github.com/187147">this</a>. The key lines are at the bottom. They tell <span class="caps">PHP</span> to fire off a command, just as if I issued it from a terminal. In my setup, the command will fire up <a href="http://culturedcode.com/things/">Things</a> if it isn&#8217;t running, or move it to the front of my windows if it is.</p>
<h2>Variations</h2>
<p>There&#8217;s a bunch of ways you could do this differently. Rather than modifying <code>/etc/hosts</code>, you could firewall off any distracting domains. You could run your own <span class="caps">HTTP</span> proxy and do the filtering there. Or, rather than popping up an application, you could have that <span class="caps">PHP</span> script (or however you decide to implement it) pull your to-do list right into the admonishing web page. Or, you could, y&#8217;know, just use plain old real actual self control. But that&#8217;s easier said than done, I&#8217;ve found.</p>
<p>What you do with the block page is really up to you. All I know is, popping up my to-do list works for me as motivation to get something done. I took a couple extra steps and ensured that only my local machine could get to that page, so folks on my local network couldn&#8217;t be popping up Things all day long by hitting the right IP in their browser. Other than that, I haven&#8217;t wanted to do anything fancier. That&#8217;s not really the point, after all.</p>
<p>Incidentally, I&#8217;ve found that limiting my consumption of distracting domains to the iPhone is a good way of regulating my time. If I have my iPhone in hand for more than a minute or two, I&#8217;m probably waiting around for something, in which case it wouldn&#8217;t hurt to see what&#8217;s up on <a href="http://news.ycombinator.com/">Hacker News</a>. Because reading on the iPhone isn&#8217;t optimal, I&#8217;m not likely to get lost in a sea of interesting links for an hour or two.</p></content>
   <author>
     <name>Ben Cohen</name>
     <uri>http://bencohen.net/</uri>
   </author>
 </entry>
 
 <entry>
   <title>Switching Season</title>
   <link href="http://bencohen.net/2009/08/10/switching-season/"/>
   <updated>2009-08-10 00:00:00 -0700</updated>
   <id>http://bencohen.net/2009/08/10/switching-season</id>
   <content type="html"><h1>Switching Season</h1>
<p>Once, maybe twice a year, I do this stupid thing. At least I&#8217;m not alone in it, as friends get the same itch, but I have to do it. I think about switching away from the Apple platform.</p>
<p>The last time I did this thought experiment was <a href="http://al3x.net/2008/08/08/computing-simplicity-minimalism-and.html">last year</a>, almost to the day. I agonized over whether or not Apple products were really simple enough to keep up with my <a href="http://minima.al3x.net/">minimalism fetish</a> (verdict: not quite, but there&#8217;s nothing more minimal out there). Since then, I got a fancy new MacBook Pro at work, shelled out for an iPhone 3GS, bought my share of Mac software, advocated the joy of the Mac and iPhone to others, and have generally been a dutiful Apple citizen.</p>
<p>Until, of course, it was that time of the year again.</p>
<h2>Mobile</h2>
<p>This year, the impetus for Switching Season has been Apple&#8217;s much-discussed fall into authoritarianism on the iPhone platform, a distressing continuation of the behavior I <a href="http://al3x.net/2008/10/05/treating-developers-right.html">wrote about last year</a>. Of all the commentary on the subject, veteran Mac developer Steven Frank <a href="http://stevenf.tumblr.com/post/152606616/important-note-references-to-i-in-this-post">wrote the piece that rings most true to me</a>:</p>
<blockquote>
<p>&#8220;I’ve reached a point where I can no longer just sit back and watch this. The iPhone ecosystem is toxic, and I can’t participate any more until it is fixed. As people have told me so many times: It’s Apple’s ballgame, and Apple gets to make the rules, and if I don’t like it, I can leave. So, I don’t like it, and I’m leaving.&#8221;</p>
</blockquote>
<p>This is how I&#8217;ve felt, politicized by Apple&#8217;s reprehensible corporate behavior. But, regrettably, embarrassingly, like a vegan caving to a steak dinner, I&#8217;m still using an iPhone.</p>
<p>I&#8217;ve tried alternatives. For my money, the only viable alternative to the iPhone is Android. Unfortunately, the experience of even the newest Android phones pales in comparison to the iPhone 3GS. I could relay my experiences here in detail, but they essentially mirror what Andre Torrez has documented of his own anti-iPhone experiment <a href="http://notes.torrez.org/2009/08/google-phone-day-1.html">since</a> <a href="http://notes.torrez.org/2009/08/android-software-day-3.html">last</a> <a href="http://notes.torrez.org/2009/08/android-day-4.html">week</a>.</p>
<p>The woeful performance and usability of Android is precisely the reason that Apple can treat developers (and consumers) however they like; it&#8217;s not even playing the same game, much less on the field with the iPhone. That Android is a mobile Linux platform is sadly apparent. Android suffers from the same issues that have plagued Linux on the desktop for years: the lack of integration between software and hardware, buggy and under-featured applications, a lack of attention paid to user experience issues. The encouraging openness and bits of innovation in Android are overshadowed by mediocrity.</p>
<p>When trying to use a myTouch 3G test unit that showed up in the office, a coworker walked by and asked, baffled, &#8220;are you still suffering through that thing?&#8221; I couldn&#8217;t figure out why, either.</p>
<h2>Desktop</h2>
<p>I have a similar love-hate relationship with the Mac desktop. On the one hand, nothing works better. There&#8217;s no better hardware, no more easy-to-use or reliable software. It&#8217;s simply the best personal computing experience available today. Which is all sort of frustrating for someone who likes to think about different ways of computing.</p>
<p>I&#8217;ve been considering violating a <a href="http://al3x.net/2008/09/08/al3xs-rules-for-computing-happiness.html">rule for computing happiness</a> that has served me well to date: don&#8217;t fuss with having more than one computer. My desire for more work/life balance, and the general fever of Switching Season, had me considering buying a machine to keep at home, rather than using my company-provided MacBook Pro for both business and personal matters.</p>
<p>As I did last year, I researched the state of PC laptops. It&#8217;s still depressing. The &#8220;race to the bottom&#8221; started by the netbook trend has resulted in an even more barren landscape of ugly, cheap, underpowered hardware. Only Lenovo seems to be producing reliable, high-quality PC hardware, but the better units in their lineup are priced so as to be uncompetitive with the equivalent Apple machines.</p>
<p>Assuming I can justify the expense to myself, I could get a ThinkPad, familiar and homely and built like a tank. Then what? Run Ubuntu on it? Sure, Linux has evolved to the point that there&#8217;s not much tinkering required to have a functional laptop (if you do your research before purchasing), but it also boasts no marked improvement over OS X. I could run a tiling window manager and not have to fuss with manual software updates, but those niceties are traded for pervasive rough edges and inconsistencies, not to mention the loss of the near-seamless integration of the iPhone with iTunes, Address Book, and the rest of the Mac experience.</p>
<p>Considered, the process of switching away from OS X seems like an exercise in frustration. There&#8217;s just no demonstrably better way to compute right now. Adding a second computer to my life just opens up a world of synchronization nightmares. I&#8217;ve also tried periodic experiments with Emacs as a way of introducing a more open, extensible tool into my daily work without leaving OS X, but I can&#8217;t escape <a href="http://al3x.net/2008/10/22/on-flight-to-old-text-editors.html">my general discomfort</a> with the editor-cum-OS.</p>
<h2>The True Meaning of Switching Season</h2>
<p>All the above griping, while cathartic, isn&#8217;t really what this post this about. It&#8217;s about discovering <em>why</em> I lose myself in this obsession every so often.</p>
<p>Switching Season is about a desire to tinker, to play, to explore other possibilities for the tools that dominate my life as technologist. That&#8217;s why it comes on, strong and regular, grabbing at my attention and pulling me away from more measurably productive pursuits. It takes me back to age 14, installing Linux on a terrible old PC for the first time, trying to get things working, learning something new in the process. It&#8217;s about computer <em>usage</em> as a creative act, something that becomes harder and harder to experience the more proficient one gets with a computer.</p>
<p>Geeks who go through the same thing every year &#8211; and I know you&#8217;re out there &#8211; understand what I&#8217;m describing. The slickness of the Apple platform is at once brilliant and constricting, a sports car that even a veteran mechanic wouldn&#8217;t dare pop the hood of. It gives one the feeling that there&#8217;s nothing left to do because Apple has done it all. Most days, that&#8217;s exactly what I want, so I can focus on doing what Apple doesn&#8217;t. During Switching Season, though, I can&#8217;t escape wanting to do it all myself.</p>
<p>Searching for openness, simplicity, and a <em>hackable</em> sense of experimentation in the modern personal computing landscape is a fruitless endeavor, or at least one incompatible with also having a tool to get real work done. The more constructive thing to do, next Switching Season, would be to start experimenting with hobbyist hardware hacking platforms like <a href="http://www.arduino.cc/">Arduino</a>, or something similarly low-level.</p>
<p>That&#8217;s what I&#8217;m going to try, anyway. And when Switching Season sets in for you, good luck.</p></content>
   <author>
     <name>Ben Cohen</name>
     <uri>http://bencohen.net/</uri>
   </author>
 </entry>
 
 <entry>
   <title>Two Unfinished Ideas About The Future</title>
   <link href="http://bencohen.net/2009/07/31/two-unfinished-ideas/"/>
   <updated>2009-07-31 00:00:00 -0700</updated>
   <id>http://bencohen.net/2009/07/31/two-unfinished-ideas</id>
   <content type="html"><h1>Two Unfinished Ideas About The Future</h1>
<p>This is what I think about when I can&#8217;t sleep. I need these out of my head. And, somehow, they&#8217;re related.</p>
<h2>Radical Transparency</h2>
<p>What passes for transparency today is, in practice, mere translucency. Organizations reveal just enough information to avoid appearing closed and monolithic. They may attempt to communicate in a more human way, or provide open access to some of their data, but most remain fundamentally closed. Today&#8217;s &#8220;transparency&#8221; is little more than marketing.</p>
<p>That which is not open is secret. Secrets are vulnerabilities waiting to be exposed. Secrets are the illusion of competitiveness. Secrets are the bondage of serendipity. Secrets are lies of omission that eat away at our social and economic relationships. Their time is over.</p>
<p>The successful organizations of the future, be they states, corporations, communities, or collectives, will be radically open. <em>Radically</em>, unlike anything we&#8217;ve seen today. True transparency isn&#8217;t about a friendly company blog, or governments being slowly pried open with freedom-of-information initiatives. It&#8217;s about structuring society around openness, because openness is the only thing that&#8217;s sustainable.</p>
<p>You will see, in time, organizations that put everything on the table. Organizations for which there is no concept of non-public communication from day one; no internal email, nothing that isn&#8217;t a matter of public record, by design. Organizations for which every employee&#8217;s salary is public knowledge. Organizations that compete solely on the merits of their work, not on surprise, deceit, and manipulation.</p>
<p>People will think these organizations are crazy. And then, over time, radical transparency will become the norm.</p>
<h2>Uncomputing</h2>
<p>In order to enable the next monumental shift in the tech industry, we&#8217;re going to have to give up everything we know. The way we use computers, the way the Internet works, it&#8217;s all going to have to change. In fact, it&#8217;s all going to have to disappear.</p>
<p>The future of computing will be about the absence of computers as we know them. The step away from the desktop model of interaction will be the first down a long road of abandoning the ideas we&#8217;ve come to take for granted. First, the desktop will go. Then, the web. What remains is something wholly unclear, but incredibly valuable. It is the Thing That Comes Next. It&#8217;s a new market, and new markets are where the wealth and opportunities are.</p>
<p>Computing for the sake of computing &#8211; for entertainment, without a goal &#8211; will dissolve as a social practice. Technology will recede into the background of people&#8217;s lives; technology as a means to an end, not a means unto itself. Our current technology-obsessed mode is one of deep cultural exploration and experimentation, but it cannot last. It should not.</p>
<p>Something is happening at the fringes of the technology landscape. The related ideas of the <a href="http://en.wikipedia.org/wiki/Internet_of_Things">Internet of Things</a> and <a href="http://en.wikipedia.org/wiki/Ubiquitous_computing">Ubiquitous Computing</a> are one avenue, but perhaps not as humanistic as they need to be in order for this change to take root. Mobile computing also affords an opportunity to leave behind tired ideas of how technology fits into our lives, but the field is in danger of being dominated by dealers of the status quo.</p>
<p>The need for new social structures and new economic models will result in a reconception of information technology. Not just as a rehashing of paper filing systems and abaci and ledger books, but something wholly other. The changes we witness daily &#8211; for example, the emphasis on &#8220;social computing&#8221; of the last several years &#8211; blind us to broader possibilities.</p>
<p>Stay open to the idea that the future is unrecognizable. You will come to know it.</p></content>
   <author>
     <name>Ben Cohen</name>
     <uri>http://bencohen.net/</uri>
   </author>
 </entry>
 
 <entry>
   <title>Fever and the Future of Feed Readers</title>
   <link href="http://bencohen.net/2009/07/18/fever-and-the-future-of-feed-readers/"/>
   <updated>2009-07-18 00:00:00 -0700</updated>
   <id>http://bencohen.net/2009/07/18/fever-and-the-future-of-feed-readers</id>
   <content type="html"><h1>Fever and the Future of Feed Readers</h1>
<p>Time was, every self-respecting geek lived and died by his feed reader (or <a href="http://en.wikipedia.org/wiki/Aggregator">aggregator</a>, if you prefer). Just several years ago, the number of subscriptions in your <span class="caps">RSS</span>-chomping tool of choice made for bragging rights. &#8220;200? Oh, I can get through 500 feeds a day.&#8221; More subscriptions meant you were more in the know. Really good lists of subscriptions were traded amongst friends, but cautiously, just as one might hold back a recommendation to a superb but little-known restaurant.</p>
<p>At the time, the only real debate was around the best way to present all this information. Some preferred a <a href="http://www.reallysimplesyndication.com/riverOfNews">river of news</a>, others preferred their content categorized and neatly filed, like sections in a newspaper. But everyone was in agreement: having all this fresh content collected for you in one place was a boon. It was a change in mindset, and it seeded the demand for what is now being called the Real-Time Web. (Incidentally, the Real-Time Web is next year&#8217;s Web 2.0. If you&#8217;d like to appear cool and aloof, start disdaining the expression now).</p>
<p>Today, at least in the web-tech echo chamber, feed reading is quickly falling out of fashion. Too many sites producing too many feeds of dubious quality means information overload, and a creeping sense of obligation to keep up with a torrent of questionably relevant content. Some have gone back to checking a handful of bookmarked sites, as we did in the early days of the web. Others rely on social aggregation sites like <a href="http://reddit.com/">Reddit</a>, <a href="http://digg.com/">Digg</a>, and <a href="http://news.ycombinator.com/">Hacker News</a> to show them what&#8217;s worth reading. Both strategies are highly manual and, to me, distressingly unoptimized.</p>
<h2>Abdicating Aggregation</h2>
<p>Another camp all but eschews the idea of trying to keep up with feeds. Chris Wanstrath, co-founder of the superb social coding site <a href="http://github.com/">GitHub</a>, is one of the more visible advocates of this approach, saying in a <a href="http://gist.github.com/6443">tech conference keynote</a> last year:</p>
<blockquote>
<p>&#8220;Stop using Google Reader or NetNewsWire or whatever the kids are using these days.  It&#8217;s not worth your time. [L]et other people do the filtering for you. Use your time for other things.&#8221;</p>
</blockquote>
<p>This statement initially rings true. We&#8217;re in the age of social networking, after all. I&#8217;ve told social sites about my friends, and my friends are always talking about things, so just show me what my friends are talking about and I&#8217;ll always be in the loop, right? Then I can focus on my own interests and projects. Sounds great.</p>
<p>The problem with abdicating your content consumption to other people, though, is other people. Perhaps it&#8217;s overestimating my ability to find interesting things to read, but I don&#8217;t trust my friends and the Internet at large to educate and entertain me. In the venn diagram of my interests and my friends&#8217;, there may be 80% overlap, but most of the content that I&#8217;m going to find deeply engaging is probably in the leftover 20% at the margins.</p>
<p>There&#8217;s also a sort of collective danger to the strategy of exclusively consuming information through social osmosis: if everyone does it, who&#8217;s going to find the interesting stuff? Who takes the reigns as the editors, the arbiters of taste? Going back to a post I wrote in 2003, who will be our <a href="http://al3x.net/2003/08/05/csas-gush-for-je.html">cool shit aggregators?</a></p>
<p>If everyone took Wanstrath&#8217;s advice, nobody would do any filtering and nobody would consume anything. Realistically, we&#8217;re in no danger of that, but we&#8217;re also not seeing a radical improvement in the way we consume information on the web. Surely someone&#8217;s investigating another strategy?</p>
<h2>Blending Subscriptions with Social Data</h2>
<p><a href="http://google.com/reader/">Google Reader</a> is, as evidence of the slowly dying field of feed reading, pretty much the only regularly-updated, widely-used aggregator left on the web. <a href="http://bloglines.com/">Bloglines</a> has been gasping for air for over a year, and <a href="http://www.newsgator.com/">NewsGator</a> is positioning itself towards the enterprise, presumably trying to scrape some money out of the generally unprofitable business of aggregation.</p>
<p>Reader has been something of a playground for Google, and one of the products for which the behemoth has been most responsive to public feedback. When Reader launched, its <a href="http://en.wikipedia.org/wiki/Google_Reader#Interface">interface</a> was nigh-unusable. It was updated, improved, and gradually became the only feed reader worth using &#8212; and not just on the web, something it pains me to say as the owner of licenses for multiple desktop aggregators that eventually had their price driven down to free, and have since seen little attention from their developers.</p>
<p>Today, Google seems hellbent on cramming its otherwise clean and speedy products with cumbersome, poorly conceived <a href="http://googlesystem.blogspot.com/2009/07/google-readers-social-evolution.html">social features</a>. Presumably they see social networks as a threat to their valuable side business of, uh, completely free products, and this is their ham-fisted response. In Reader&#8217;s case, the user response has been one of <a href="http://latimesblogs.latimes.com/technology/2009/07/google-reader-like-follow.html">confusion and derision</a>.</p>
<p>Seeing content filtered through my social lens seems like the marriage of traditional feed reading to Wanstrath&#8217;s more osmotic approach. Reader&#8217;s implementation doesn&#8217;t prove this to be a happy union. The tool is now cluttered with smilie faces indicating content that my friends liked, only Google has fairly incomplete view of who my friends are because they&#8217;ve yet to create a social experience that encourages me to share that information. Reader&#8217;s myriad competing ways to share, vote on, annotate, and remember items further detract from its former appeal.</p>
<p>I&#8217;ve given up on Reader, but I&#8217;m not ready to give up on feed reading just yet. I wanted to try one more experiment.</p>
<h2>Enter Fever</h2>
<p><a href="http://feedafever.com/">Fever</a> is a feed reader designed and built by <a href="http://shauninman.com/">Shaun Inman</a>, the developer behind the popular <a href="http://haveamint.com/">Mint</a> web traffic analytics product. Like Mint, Fever is $30 (<span class="caps">USD</span>) and runs on your server &#8212; a ballsy proposition in an age of free software running in the proverbial &#8220;cloud&#8221;. It is unapologetically for power users.</p>
<p>Fever&#8217;s proposition is straightforward: supply it with the feeds you always want to read, and supplement those with feeds that you only want to read the juicy bits of. Fever will then show you a sort of personal Techmeme or Google News, pulling together stories that reference common URLs. Fever&#8217;s precise formula for this isn&#8217;t discussed on the product&#8217;s relatively curt homepage. Take it or leave it.</p>
<p>I forked over my money, spun up a virtual server, and have been using Fever for several days now. Installation was as straightforward and slick as you could hope for given that Fever is a self-hosted web application. Special features aside, it handles the basics well &#8212; imagine Google Reader before all the social bloat and with a far more attractive design. Fever&#8217;s design is <a href="http://mike.teczno.com/notes/fever-again.html">not perfect</a>, but it&#8217;s easy on the eyes and pleasant to use. Put another way, Fever doesn&#8217;t make it harder to read feeds much as you always have.</p>
<p>The $30 question, though: does Fever really float the best, most relevant content to the top in a personalized way? Can it dig through all the noise on the web and show you what you need/want to know at a glance? The free answer: <em>sort of</em>.</p>
<p>For starters, it&#8217;s easy to pollute your corpus of &#8220;signal&#8221; feeds, which Fever calls <em>sparks</em>. Fever needs sparks that contain a lot of links. If you put &#8220;top&#8221; feeds from Digg, Reddit, and the like into Fever, you&#8217;ll basically just end up with your own dim, mostly irrelevant slice of the web. Fever really needs folks like <a href="http://waxy.org/links/">Waxy</a>, <a href="http://links.laughingsquid.com/">Laughing Squid</a>, and <a href="http://chneukirchen.org/trivium/">Trivium</a> to keep churning out link blogs full of references to good content. Without those sort of quality, <span class="caps">URL</span>-rich feeds, your Fever&#8217;s view of what&#8217;s hot is going to be lukewarm.</p>
<p>For this reason, Fever is just fine for floating good techie content to the top, but poor for most any other subject. I&#8217;d love it if Fever could find me good posts from the set of minimal techno or cocktail blogs I subscribe to, but link blogs &#8211; and, indeed, linking outside one&#8217;s own site &#8211; just aren&#8217;t as prevalent in those communities. Fever did similarly poorly given a number of sparks for top world news; a paucity of URLs means Fever can&#8217;t replace Google News for figuring out what&#8217;s on the front pages of the world&#8217;s newspapers.</p>
<p>It&#8217;s disappointing that I can&#8217;t depend on Fever to be a one-stop shop for my daily information intake. With my current heavily-curated collection of subscriptions, I can rely on Fever to be a sort of no-bullshit Techmeme, but little more. For the topics of world news, music, art, culture, humor, food, and drink, I still need to read a number of feeds entry-by-entry.</p>
<p>Given Fever&#8217;s initial cost, plus the ongoing cost of hosting a server on which to run it, I can&#8217;t imagine that it&#8217;s a tool that will last long in my tool belt. I already regret the time I spent setting it up and tuning my feeds, and I can&#8217;t really justify keeping it around for the sole purpose of being a less-encumbered Google Reader.</p>
<h2>The Future of Feed Readers</h2>
<p>I&#8217;m not sure what the solution is here. Feed readers as we&#8217;ve known them are dying, but it&#8217;s as yet unclear what will take their place. Filtering feeds for relevance algorithmically seems all but fruitless; filtering through the social graph is only a slight improvement, but misses the rare content that may only strike a chord with a small audience.</p>
<p>If there&#8217;s one thing I&#8217;m convinced of at the end of this exploration, it&#8217;s that there&#8217;s more work to be done, and more businesses to emerge in this field. Social networks alone aren&#8217;t focused enough tools to bubble up and share quality content. My hope is that a surplus open data of the sort we&#8217;re trying hard to share at <a href="http://apiwiki.twitter.com/">Twitter</a> will help spawn a new generation of tools to manage the flood of content. I don&#8217;t think it&#8217;s a problem that Twitter, or any other pipeline for information, can solve on its own.</p>
<p>With all that said, perhaps the right approach really is to abdicate one&#8217;s consumption of content to whatever you&#8217;re passively exposed to, and to occupy your mind with other things. The act of creation is almost always self-affirming, and the act of consumption so rarely is.</p></content>
   <author>
     <name>Ben Cohen</name>
     <uri>http://bencohen.net/</uri>
   </author>
 </entry>
 
 <entry>
   <title>The Tapir Book</title>
   <link href="http://bencohen.net/2009/07/07/the-tapir-book/"/>
   <updated>2009-07-07 00:00:00 -0700</updated>
   <id>http://bencohen.net/2009/07/07/the-tapir-book</id>
   <content type="html"><h1>The Tapir Book</h1>
<p>When <a href="http://deanwampler.com/">my coauthor</a> and I began working on <a href="http://programmingscala.com/">Programming Scala</a> last year, the most frequent comment I got was, &#8220;you&#8217;re never going to want to write another book once you&#8217;re done.&#8221; Well, as of this morning, I&#8217;m pretty much done, and I can say that I&#8217;d very much like to write <a href="http://ideas.al3x.net/syntax-the-definitive-history-of-programming">another book</a>. I don&#8217;t think, though, that I would commit to another one while working a full-time job, and I certainly wouldn&#8217;t recommend trying to write a book while working at a rapidly growing startup.</p>
<p>When I announced that I was going to be working on the book, a critic insinuated that it would detract from my work at <a href="http://twitter.com/">Twitter</a>. In practice, the opposite was true. I had many an evening or weekend afternoon of writing interrupted by fires at work that needed fighting. For that reason, I wouldn&#8217;t consider taking on another book project until I can give it my full attention. The value of sabbaticals as practiced in the academic world was made crystal clear to me throughout the writing process.</p>
<p>There&#8217;s a reason why Dean&#8217;s name comes first on the book&#8217;s cover: he is unambiguously the principal contributor to <em>Programming Scala</em>. We worked from his outline, and though much was changed and reorganized collaboratively, the backbone of the book is absolutely Dean&#8217;s. I couldn&#8217;t have asked for a better coauthor. If anything, I wish that I could have contributed more equally to the text. What I did contribute, though, I&#8217;m proud of. We handed off our content to the production team at O&#8217;Reilly earlier today, and I can hardly wait until October to have the final product in my hands (and on my Kindle).</p>
<p>I took on the book in part to develop a mastery of Scala, and I&#8217;ve looked forward to learning something new every time I sit down to write, week after week. Though I understand more of the language than I did when I started, I still don&#8217;t feel that I&#8217;m on the level of folks like <a href="http://blog.lostlake.org/">David Pollak</a>, <a href="http://scalatips.tumblr.com/">Jorge Ortiz</a>, <a href="http://www.codecommit.com/blog/">Daniel Spiewak</a>, and the rest of the Scala gurus who dove into the language well before Dean or I. Still, it&#8217;s been an incredible learning experience, and I&#8217;m extremely grateful to everyone who made it possible, not least of all our editor, <a href="http://www.oreillynet.com/pub/au/29">Mike Loukides</a>.</p>
<p>This coming weekend will be my first in many months that is completely open, free of examples that need to be written, sections that need to be reorganized, reader feedback to incorporate, and unfamiliar concepts that need to be researched before I can write about them with confidence. With the free time I now have again, I can get back to <a href="http://github.com/al3x">writing open source code</a>, <a href="http://seriousdjs.net/">mixing music</a>, exploring the Bay Area, posting to this blog, and all the other things I&#8217;ve set aside while working on the book.</p>
<p>It&#8217;s liberating to be done, but bittersweet.</p>
<h2>Since I Left You</h2>
<p>I have managed to do a bit of this and that while wrapping up the book. We&#8217;ve set up a <a href="http://apiblog.twitter.com/">blog for the Twitter platform</a>, and I&#8217;ve contributed a few posts to that. I&#8217;ve managed several <a href="http://al3x.net/books_talks.html">talks</a>, and committed to a couple more later this year.</p>
<p>Most cathartically, I&#8217;ve laid open <a href="http://ideas.al3x.net/">my virtual notebook of ideas</a> for all the web to see. I&#8217;m going to be at Twitter for a couple more years at least, if all goes well, and it seems a shame to let ideas sit in a text file and rot in the interim. Some of the ideas I fully intend on seeing through myself, in time. Others I hope will be picked up, improved upon, or made irrelevant by people smarter and more talented than myself. Either way, it&#8217;s been an experiment in radical openness (a topic I&#8217;m preoccupied with), and one that&#8217;s paid off from day one.</p>
<p>It should be less quiet around here, again, now.</p></content>
   <author>
     <name>Ben Cohen</name>
     <uri>http://bencohen.net/</uri>
   </author>
 </entry>
 
</feed>